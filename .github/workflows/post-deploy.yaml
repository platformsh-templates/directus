---
# Retrieving a Platform.sh development environment URL, which is then used to run subsquent workflows.
name: Post-deployment tests

on:
  push:
    branches-ignore:
      - 'master'

# env:
#     ACC_MIN: 0.80
#     BPR_MIN: 0.90
#     PRF_MIN: 0.90
#     SEO_MIN: 0.85

jobs:
    build:
        runs-on: ubuntu-latest
        name: 'Get environment URL'
        outputs:
            commit_status: ${{ steps.status.outputs.env_status }}
            env_url: ${{ steps.url.outputs.env_url }}  
        steps: 
            - uses: actions/checkout@v2
            - name: 'Await deployment'
              id: wait
              run: |
                COMMIT_STATUS="pending"
                STATUSES=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA  | jq -r 'length')
                if [ $STATUSES == 0 ]; then
                    echo "Not on a Platform.sh integrated environment. Skipping."
                    echo "::set-output name=integration::none"
                else
                    until [ "$COMMIT_STATUS" == "success" ] || [ "$COMMIT_STATUS" == "failure" ]; do
                      sleep 10
                      ENV_URL=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA  | jq -r '.[0].target_url')
                      COMMIT_STATUS=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA  | jq -r '.[0].state')
                      
                      echo "Waiting for Platform.sh environment to deploy ...."
                      echo "  - $GITHUB_SHA"
                      echo "  - $COMMIT_STATUS"
                      echo "  - $ENV_URL"
                    done
                    echo "Environment deployed. Finished."
                    echo "::set-output name=integration::platformsh"
                fi
            - name: 'Pass status'
              id: status
              if: steps.wait.outputs.integration == 'platformsh'
              run: |
                COMMIT_STATUS=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA  | jq -r '.[0].state')
                echo "::set-output name=env_status::$COMMIT_STATUS"
            - name: 'Pass URL'
              id: url
              if: steps.wait.outputs.integration == 'platformsh'
              run: |
                ENV_URL=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA  | jq -r '.[0].target_url')
                echo "::set-output name=env_url::$ENV_URL"
    # Activity script: integration target_url should be deployed site on success, but shareable activity on failure.
    test:
        name: 'Status tests'
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: 'Application should deploy successfully'
              uses: lakuapik/gh-actions-http-status@v1
              with:
                sites: '["${{ needs.build.outputs.env_url }}"]'
                expected: '[301]'
    # audit:
    #     name: 'Lighthouse Audit'
    #     runs-on: ubuntu-latest
    #     needs: build
    #     outputs:
    #         audit_data: ${{ steps.report.outputs.report_data }}
    #     steps:
    #         - name: Audit live URL
    #           uses: jakejarvis/lighthouse-action@master
    #           with:
    #             url: ${{ needs.build.outputs.env_url }}admin
    #         - name: Upload results as an artifact
    #           uses: actions/upload-artifact@master
    #           with:
    #             name: report
    #             path: './report'
    #         - name: Pass report data
    #           id: report
    #           run: |
    #               export REPORT=$(ls report | grep \.json$)
    #               echo "Download the full report under *Artifacts* at: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
    #               echo "::set-output name=report_data::$REPORT"
    #         - name: SEO test
    #           run: |
    #               REPORT=$(ls report | grep \.json$)
    #               SCORE=$(cat report/$REPORT | jq -r '.categories.seo.score')
    #               if [ 1 -eq "$(echo "${SCORE} < ${{ env.SEO_MIN }}" | bc)" ]; then
    #                   echo "Threshold Failed. Download the full report under *Artifacts* at: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
    #                   exit 1
    #               fi
    # audit-test:
    #     runs-on: ubuntu-latest
    #     name: 'Lighthouse Tests'
    #     needs: audit
    #     steps:                
    #         - name: Performance test
    #           run: |
    #               REPORT=${{ needs.audit.outputs.audit_data }}
    #               SCORE=$(cat $REPORT | jq -r '.categories.performance.score')
    #               echo $SCORE
    #         - name: Accessibility test
    #           run: |
    #               REPORT=${{ needs.audit.outputs.audit_data }}
    #               SCORE=$(cat $REPORT | jq -r '.categories.accessibility.score')
    #               echo $SCORE
    #         - name: Best Practices test
    #           run: |
    #               REPORT=${{ needs.audit.outputs.audit_data }}
    #               SCORE=$(cat $REPORT | jq -r '.categories."best-practices".score')
    #               echo $SCORE
    #         - name: SEO test
    #           run: |
    #               REPORT=${{ needs.audit.outputs.audit_data }}
    #               SCORE=$(cat $REPORT | jq -r '.categories.seo.score')
    #               if [ 1 -eq "$(echo "${SCORE} < ${{ env.SEO_MIN }}" | bc)" ]; then
    #                   echo "Threshold Failed. Download the full report under *Artifacts* at: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
    #                   exit 1
    #               fi
